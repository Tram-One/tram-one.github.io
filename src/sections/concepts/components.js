import { registerHtml } from 'tram-one';

const html = registerHtml({
	'section-container': require('../../components/section-container'),
	'section-header': require('../../components/section-header'),
	'section-text': require('../../components/section-text'),
	'code-block': require('../../components/code-block'),
	'code-style': require('../../components/code-style'),
});

const customHeader = `
const html = registerHtml()
const MyHeader = () => {
  return html\`
    <h1>Tram-One Rules</h1>
  \`
}
`;

const componentInRegistry = `
const html = registerHtml({
  'MyHeader': MyHeader
})

const MyPage = () => {
  return html\`
    <main>
      <MyHeader />
      <p>Welcome to my page</p>
    </main>
  \`
}
`;

const componentWithParameters1 = `
const html = registerHtml()

const ColorizedHeader = (attrs, children) => {
  const {className, color} = attrs
  return html\`
    <h1
      class=\${className}
      style="color=\${color};">
      \${children}
    </h1>
  \`
}
`;

const componentWithParameters2 = `
const html = registerHtml({
  'colorized-header': ColorizedHeader
})

const Page = () => {
  return html\`
    <colorized-header class="page-header" color="red">
      Standard & Custom Attributes!
    </colorized-header>
  \`
}
`;

module.exports = (attrs) => {
	return html`
		<section>
			<section-header level="3" anchor="components" header="Components" />
			<section-container>
				<section-text>
					Components are the main visual components you'll work with to build applications. They are inspired heavily by
					<a href="https://reactjs.org/">React's</a> JSX and <a href="https://choo.io/">Choo</a>. <br /><br />
					Components are always functions, and they should always return some DOM generated by the HTML template tag
					function.
				</section-text>
				<code-block> ${customHeader} </code-block>
			</section-container>
			<section-container>
				<section-text>
					Components can be included in other custom components when passed into <code-style>registerHtml</code-style>.
					<br /><br />
					When imported, the <code-style>key</code-style> dictates what the tag name will be. This can be camel case,
					hyphenated, or just a lowercase string! <br /><br />
					While still native Javascript, you can build complex and nested components just like you might with React's
					JSX.
				</section-text>
				<code-block> ${componentInRegistry} </code-block>
			</section-container>
			<section-container>
				<section-text>
					Components can have attributes and children. Both are optional parameters that are written just like normal
					HTML in the template, and come in as parameters in the component.
					<br /><br />
					Attributes can match the standard html spec (e.g. <code-style>id</code-style>, <code-style>class</code-style>,
					<code-style>onclick</code-style>), or be custom variables. <br /><br />
					Children are just nodes inside the component, and shouldn't be manipulated directly, but can be wrapped with
					other DOM.
				</section-text>
				<code-block> ${componentWithParameters1} </code-block>
			</section-container>
			<section-container>
				<section-text>
					Attributes and children are written just like normal HTML. There are no special directives or properties.
					Tram-One's HTML Templates mimic standard HTML.
				</section-text>
				<code-block> ${componentWithParameters2} </code-block>
			</section-container>
		</section>
	`;
};
